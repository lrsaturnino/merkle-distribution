schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

enum Aggregation_interval {
  hour
  day
}

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

"""
8 bytes signed integer

"""
scalar Int8

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type Query {
  simplePREApplication(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SimplePREApplication
  simplePREApplications(
    skip: Int = 0
    first: Int = 100
    orderBy: SimplePREApplication_orderBy
    orderDirection: OrderDirection
    where: SimplePREApplication_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SimplePREApplication!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

"""
SimplePREApplication represents the state of Simple Proxy ReEncryption operators
"""
type SimplePREApplication {
  """ID is the staking provider ETH address"""
  id: ID!
  """Operator's ETH address"""
  operator: Bytes!
  """Stake address related to this PRE operator"""
  stake: Bytes!
  """
  UNIX timestamp in which an operator was bonded for this staking provider for first time
  """
  bondedTimestamp: BigInt
  """
  UNIX timestamp in which an operator was confirmed for this staking provider for first time
  """
  confirmedTimestamp: BigInt
}

input SimplePREApplication_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  operator: Bytes
  operator_not: Bytes
  operator_gt: Bytes
  operator_lt: Bytes
  operator_gte: Bytes
  operator_lte: Bytes
  operator_in: [Bytes!]
  operator_not_in: [Bytes!]
  operator_contains: Bytes
  operator_not_contains: Bytes
  stake: Bytes
  stake_not: Bytes
  stake_gt: Bytes
  stake_lt: Bytes
  stake_gte: Bytes
  stake_lte: Bytes
  stake_in: [Bytes!]
  stake_not_in: [Bytes!]
  stake_contains: Bytes
  stake_not_contains: Bytes
  bondedTimestamp: BigInt
  bondedTimestamp_not: BigInt
  bondedTimestamp_gt: BigInt
  bondedTimestamp_lt: BigInt
  bondedTimestamp_gte: BigInt
  bondedTimestamp_lte: BigInt
  bondedTimestamp_in: [BigInt!]
  bondedTimestamp_not_in: [BigInt!]
  confirmedTimestamp: BigInt
  confirmedTimestamp_not: BigInt
  confirmedTimestamp_gt: BigInt
  confirmedTimestamp_lt: BigInt
  confirmedTimestamp_gte: BigInt
  confirmedTimestamp_lte: BigInt
  confirmedTimestamp_in: [BigInt!]
  confirmedTimestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [SimplePREApplication_filter]
  or: [SimplePREApplication_filter]
}

enum SimplePREApplication_orderBy {
  id
  operator
  stake
  bondedTimestamp
  confirmedTimestamp
}

type Subscription {
  simplePREApplication(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SimplePREApplication
  simplePREApplications(
    skip: Int = 0
    first: Int = 100
    orderBy: SimplePREApplication_orderBy
    orderDirection: OrderDirection
    where: SimplePREApplication_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SimplePREApplication!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}